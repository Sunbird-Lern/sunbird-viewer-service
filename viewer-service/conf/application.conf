

# db connections = ((physical_core_count * 2) + effective_spindle_count)
fixedConnectionPool = 5
play.modules.enabled+="modules.ActorInjector"
play.filters.enabled+="filter.RequestInterceptor"
env=local

log4j.appender.kafka.enable="true"
log4j.appender.kafka.broker_host="localhost:9092"
log4j.appender.kafka.topic="viewer.telemetry.log"

default-dispatcher {
  executor = "fork-join-executor"
  fork-join-executor {
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 3.0

    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 8

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
  }
  # Throughput for default Dispatcher, set to 1 for as fair as possible
  throughput = 1
}

view-collect-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 3.0

    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
  }
  # Throughput for default Dispatcher, set to 1 for as fair as possible
  throughput = 1
}

view-provide-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 2.0

    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 4
  }
  # Throughput for default Dispatcher, set to 1 for as fair as possible
  throughput = 1
}




akka {
  actor {
  	deployment {
        /health-check-actor {
          router = smallest-mailbox-pool
          nr-of-instances = 1
        }
        /view-collect-actor {
          router = smallest-mailbox-pool
          nr-of-instances = 1
          dispatcher= view-collect-dispatcher
        }
        /view-read-actor {
          router = smallest-mailbox-pool
          nr-of-instances = 1
          dispatcher = view-provide-dispatcher
        }
    }
  }
}

#Netty Configuration
play.server {

  # The server provider class name
  provider = "play.core.server.NettyServerProvider"

  netty {

    # The number of event loop threads. 0 means let Netty decide, which by default will select 2 times the number of
    # available processors.
    eventLoopThreads = 30

    # Whether the Netty wire should be logged
    log.wire = true

    # The transport to use, either jdk or native.
    # Native socket transport has higher performance and produces less garbage but are only available on linux
    transport = "jdk"
  }
}
akka.loglevel = DEBUG

cassandra.connection.host = localhost
cassandra.connection.port=9042
kafka.broker.list="localhost:9092"
kafka_topics_instruction=test.course
kafka_assessment_batch_topic = test.batch.assess
kafka_assessment_failed_topic = test.batch.assess.failed
accesstoken_publickey_basepath="/home/revathi/ssh-keyws/keycloak/"
redis {
  host = localhost
  port = 6379
  connection {
    max = 1
    idle.max = 1
    idle.min = 1
    minEvictableIdleTimeSeconds= 100
    timeBetweenEvictionRunsSeconds = 300
   }
  viewer{
    db=1
  }
}

